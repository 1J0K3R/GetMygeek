@using GetMygeek.Models
@using System.Text.Json

<MudGrid Spacing="10" Justify="Justify.Center">
    @if (listeProfil != null && listeProfil.Consultants.Count > 0)
    {
        @foreach (var profil in listeProfil.Consultants)
        {
            <MudItem>
                <Card Profil="@profil"/>
            </MudItem>
        }
    }
    else
    {
        <MudText>Chargement des données...</MudText>
    }
</MudGrid>


@code{
    /// <summary>
    /// Un parametre pour recuperer les parametres rentres dans la recherche
    /// </summary>
    [Parameter]
    public ResearchQuery? researchQuery { get; set; }

    /// <summary>
    /// L'objet contenant tous les profils'
    /// </summary>
    private ListeProfil listeProfil;

    /// <summary>
    /// Methode d'initialisation de l'objet
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // Lire et désérialiser le fichier JSON lors de l'initialisation
        listeProfil = await GetListeProfilBySqlRequestAsync();
    }

    // Méthode pour lire et désérialiser le fichier JSON
    private async Task<ListeProfil> GetListeProfilBySqlRequestAsync()
    {
        // A partir des paramètres de ResearchQuery on efféctue l'appelle SQL
        // researchQuery.GenerateSQLRequest();
        try
        {
            FileStream fileStream = File.OpenRead("Data/Phototeque.json");
            ListeProfil listeProfil = await JsonSerializer.DeserializeAsync<ListeProfil>(fileStream);

            return listeProfil;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la lecture du fichier JSON : {ex.Message}");
            return null;
        }
    }
}