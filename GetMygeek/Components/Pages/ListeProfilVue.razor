@using GetMygeek.Data
@using GetMygeek.Data.ORM
@using GetMygeek.Models
@using System.Text.Json
@inject IDatabaseService DatabaseService

<MudGrid Spacing="10" Justify="Justify.Center">
    @if (tableConsultant != null && tableConsultant.Count() > 0)
    {
        @foreach (var consultant in tableConsultant)
        {
            <MudItem>
                <Card Profil="@consultant" />
            </MudItem>
        }
    }
    else
    {
        <MudText>Chargement des données...</MudText>
    }
</MudGrid>


@code{
    /// <summary>
    /// Un parametre pour recuperer les parametres rentres dans la recherche
    /// </summary>
    [Parameter]
    public ResearchQuery? researchQuery { get; set; }

    private IEnumerable<Consultant> tableConsultant;

    /// <summary>
    /// Cette méthode est appelée chaque fois que les paramètres du composant changent (par exemple, quand la recherche est mise à jour).
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        tableConsultant = await GetListeProfilBySqlRequestAsync();
        StateHasChanged();
    }


    /// <summary>
    /// Méthode permettant de récupérer les éléments de la base de données correspondant aux filtres présents dans la barre de recherche.
    /// </summary>
    /// <returns></returns>
    private async Task<IEnumerable<Consultant>> GetListeProfilBySqlRequestAsync()
    {      
        try
        {
            return await DatabaseService.GetConsultantsResearchBar(researchQuery);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la écupération de la table consultant de la base de données {ex.Message}");
            return null;
        }
    }
}